import logging
import asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    ConversationHandler,
    filters
)
import requests
import random
import wikipedia

# –¢–æ–∫–µ–Ω –∏ –≤–∏–∫–∏
TOKEN = "7778655865:AAGz5DQnaJyrpFmtwMz01ehRkkTKiGsFmhw"
wikipedia.set_lang("ru")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
SETTING_REMINDER = 1

# –ú–µ–Ω—é—à–∫–∞ –≤ –±–æ—Ç–µ
main_keyboard = [['–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', '–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç'], ['–ü–∞—Ä–æ–ª—å', '–í–∏–∫–∏–ø–µ–¥–∏—è'], ['–ü–æ–º–æ—â—å']]
reply_markup = ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)


async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é:",
        reply_markup=reply_markup
    )


async def help_command(update: Update, context: CallbackContext):
    help_text = """
üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:
–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ" –∏–ª–∏ –Ω–∞–ø–∏—à–∏:
"<—Ç–µ–∫—Å—Ç> —á–µ—Ä–µ–∑ <–º–∏–Ω—É—Ç—ã>"
–ü—Ä–∏–º–µ—Ä: "–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ 30"

üí± /convert <—Å—É–º–º–∞> <–≤–∞–ª—é—Ç–∞1> <–≤–∞–ª—é—Ç–∞2>
–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∞–ª—é—Ç—ã
–ü—Ä–∏–º–µ—Ä: /convert 100 USD RUB

üîë /password <–¥–ª–∏–Ω–∞>
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å
–ü—Ä–∏–º–µ—Ä: /password 12

üîç /wiki <–∑–∞–ø—Ä–æ—Å>
–ò—â–µ—Ç –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏
–ü—Ä–∏–º–µ—Ä: /wiki Python
"""
    await update.message.reply_text(help_text)


async def reminder(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<—Ç–µ–∫—Å—Ç> —á–µ—Ä–µ–∑ <–º–∏–Ω—É—Ç—ã>\n\n"
        "–ü—Ä–∏–º–µ—Ä: –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ 30"
    )
    return SETTING_REMINDER


async def set_reminder(update: Update, context: CallbackContext) -> int:
    try:
        text = update.message.text
        if "—á–µ—Ä–µ–∑" not in text:
            raise ValueError

        task, _, minutes_str = text.partition("—á–µ—Ä–µ–∑")
        task = task.strip()
        minutes = int(minutes_str.strip())

        if minutes <= 0:
            await update.message.reply_text("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –º–∏–Ω—É—Ç!")
            return SETTING_REMINDER

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö
        context.user_data['reminder'] = {
            'text': task,
            'minutes': minutes,
            'chat_id': update.message.chat_id
        }

        # –ó–∞–ø—É—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        asyncio.create_task(
            send_reminder_after_delay(
                minutes * 60,
                update.message.chat_id,
                task,
                context
            )
        )

        await update.message.reply_text(
            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n"
            f"–Ø –Ω–∞–ø–æ–º–Ω—é: '{task}'\n"
            f"–ß–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç"
        )

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π:\n"
            "<—Ç–µ–∫—Å—Ç> —á–µ—Ä–µ–∑ <–º–∏–Ω—É—Ç—ã>\n\n"
            "–ü—Ä–∏–º–µ—Ä: –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ 30"
        )
        return SETTING_REMINDER

    return ConversationHandler.END


async def send_reminder_after_delay(delay: int, chat_id: int, text: str, context: CallbackContext):
    try:
        await asyncio.sleep(delay)
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞—é: {text}"
        )
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


async def currency_converter(update: Update, context: CallbackContext):
    try:
        if len(context.args) != 3:
            raise ValueError

        amount = float(context.args[0])
        base_cur = context.args[1].upper()
        target_cur = context.args[2].upper()

        rate = get_exchange_rate(base_cur, target_cur)
        if rate is None:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        result = amount * rate
        await update.message.reply_text(
            f"üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è:\n"
            f"{amount:.2f} {base_cur} = {result:.2f} {target_cur}\n"
            f"–ö—É—Ä—Å: 1 {base_cur} = {rate:.4f} {target_cur}"
        )
    except (ValueError, IndexError):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π:\n"
            "/convert <—Å—É–º–º–∞> <–≤–∞–ª—é—Ç–∞1> <–≤–∞–ª—é—Ç–∞2>\n\n"
            "–ü—Ä–∏–º–µ—Ä: /convert 100 USD RUB"
        )


def get_exchange_rate(base: str, target: str) -> float:
    url = f"https://api.exchangerate-api.com/v4/latest/{base}"
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        data = response.json()
        return data["rates"].get(target, 1.0)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –≤–∞–ª—é—Ç: {e}")
        return None


async def generate_password(update: Update, context: CallbackContext):
    try:
        length = int(context.args[0]) if context.args else 12
        length = max(4, min(length, 32))  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ

        chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*"
        password = "".join(random.choice(chars) for _ in range(length))

        await update.message.reply_text(
            f"üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–∞—Ä–æ–ª—å:\n\n"
            f"<code>{password}</code>\n\n"
            f"–î–ª–∏–Ω–∞: {length} —Å–∏–º–≤–æ–ª–æ–≤",
            parse_mode="HTML"
        )
    except ValueError:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è —á–∏—Å–ª–æ–º\n"
            "–ü—Ä–∏–º–µ—Ä: /password 12"
        )


async def wiki_search(update: Update, context: CallbackContext):
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        return

    query = " ".join(context.args)
    try:
        summary = wikipedia.summary(query, sentences=3)
        await update.message.reply_text(
            f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n"
            f"{summary}"
        )
    except wikipedia.exceptions.DisambiguationError as e:
        await update.message.reply_text(
            f"‚ùì –ó–∞–ø—Ä–æ—Å –ø–ª–æ—Ö–æ –ø–æ–Ω—è—Ç. –£—Ç–æ—á–Ω–∏—Ç–µ:\n\n"
            f"{', '.join(e.options[:5])}"
        )
    except wikipedia.exceptions.PageError:
        await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Wikipedia: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")


async def button_handler(update: Update, context: CallbackContext):
    text = update.message.text
    if text == '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ':
        await reminder(update, context)
    elif text == '–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç':
        await update.message.reply_text(
            "–î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n\n"
            "`/convert <—Å—É–º–º–∞> <–≤–∞–ª—é—Ç–∞1> <–≤–∞–ª—é—Ç–∞2>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/convert 100 USD RUB`",
            parse_mode="Markdown"
        )
    elif text == '–ü–∞—Ä–æ–ª—å':
        await update.message.reply_text(
            "–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n\n"
            "`/password <–¥–ª–∏–Ω–∞>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/password 12`",
            parse_mode="Markdown"
        )
    elif text == '–í–∏–∫–∏–ø–µ–¥–∏—è':
        await update.message.reply_text(
            "–î–ª—è –ø–æ–∏—Å–∫–∞ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n\n"
            "`/wiki <–∑–∞–ø—Ä–æ—Å>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/wiki Python`",
            parse_mode="Markdown"
        )
    elif text == '–ü–æ–º–æ—â—å':
        await help_command(update, context)


def main():
    application = ApplicationBuilder().token(TOKEN).build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    reminder_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ$'), reminder)],
        states={
            SETTING_REMINDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_reminder)]
        },
        fallbacks=[]
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("convert", currency_converter))
    application.add_handler(CommandHandler("password", generate_password))
    application.add_handler(CommandHandler("wiki", wiki_search))
    application.add_handler(reminder_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler))

    application.run_polling()


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    main()
